#!/usr/bin/env python
import sqlite3
import os.path
import sys

class Permutation:
	def __init__(self):
		self.id = 0
		self.flags = ''
		self.buildExit = 0
		self.buildWallTime = 0
		self.buildUserSystemTime = 0
		self.buildSize = 0,
		self.testExit = 0
		self.benchmarks = []

class Benchmark:
	def __init__(self):
		self.id = 0
		self.speedScore = 0
		self.memoryScore = 0

comma = ', '
def createTable(tableName, columns):
	return 'create table {0} ({1})'.format(tableName, comma.join([column[0] + ' ' + column[1] for column in columns]))

def insertInto(tableName, columns):
	return 'insert into {0} ({1}) values ({2})'.format(tableName, comma.join([column[0] for column in columns[1:]]), comma.join(['?' for column in columns[1:]]))

# adjust the file name if it's different
resultFile = open('analysis.txt')

# package name
packageName = resultFile.readline()

permutations = []
line = resultFile.readline()
while line != '' and line[0] == '#':
	tokens = line.split('|')

	# new permutation
	permutation = Permutation()
	permutation.id = tokens[0][1:]
	permutation.flags = tokens[1].replace('\n', '')

	# build stats
	tokens = resultFile.readline().split('|')
	permutation.buildExit = tokens[0]
	permutation.buildWallTime = tokens[1]
	permutation.buildUserSystemTime = tokens[2]
	permutation.buildSize = tokens[3]

	# test stats
	permutation.testExit = resultFile.readline()

	#benchmark runs
	line = resultFile.readline()
	while line != '' and line[0] == '$':
		tokens = line.split('|')

		benchmark = Benchmark()
		benchmark.id = tokens[0][1:]
		benchmark.speedScore = tokens[1]
		benchmark.memoryScore = tokens[2]

		permutation.benchmarks.append(benchmark)
		line = resultFile.readline()

	permutations.append(permutation)

# store results
dbName = 'results.db'
dbExists = os.path.exists(dbName)
connection = sqlite3.connect(dbName)

primaryKey = ' primary key autoincrement'
typeInteger = 'integer'
typeText = 'text'
tablePermutations = 'permutations'
tableBenchmarks = 'benchmarks'

permutationColumns = (
	('uniqueId', typeInteger + primaryKey),
	('givenId', typeInteger),
	('flags', typeText),
	('buildExit', typeInteger),
	('buildWallTime', typeInteger),
	('buildUserSystemTime', typeInteger),
	('buildSize', typeInteger),
	('testExit', typeInteger))

benchmarkColumns = (
	('uniqueId', typeInteger + primaryKey),
	('permutationUniqueId', typeText),
	('givenId', typeInteger),
	('speedScore', typeInteger),
	('memoryScore', typeInteger))

if not dbExists:
	connection.execute(createTable(tablePermutations, permutationColumns))
	connection.execute(createTable(tableBenchmarks, benchmarkColumns))

for per in permutations:
	cursor = connection.cursor()
	connection.execute(
		insertInto(tablePermutations, permutationColumns),
		(per.id, per.flags, per.buildExit, per.buildWallTime, per.buildUserSystemTime, per.buildSize, per.testExit))

	lastId = cursor.lastrowid

	for bench in per.benchmarks:
		connection.execute(
			insertInto(tableBenchmarks, benchmarkColumns),
			(bench.id, lastId, bench.speedScore, bench.memoryScore))

connection.commit()

print('Permutations:\n' + comma.join([column[0] for column in permutationColumns]))
for row in connection.execute('select * from ' + tablePermutations):
	print(row)
	for benchRow in connection.execute('select * from ' + tableBenchmarks + ' where ' + benchmarkColumns[1][0] + ' = ' + str(row[0])):
		print('\t', end = '')
		print(benchRow)

connection.close()
