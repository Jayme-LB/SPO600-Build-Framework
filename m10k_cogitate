import sqlite3
import os.path

class Permutation:
	def __init__(self):
		self.id = 0
		self.flags = ''
		self.buildExit = 0
		self.buildWallTime = 0
		self.buildUserSystemTime = 0
		self.buildSize = 0,
		self.testExit = 0
		self.benchmarks = []

class Benchmark:
	def __init__(self):
		self.id = 0
		self.speedScore = 0
		self.memoryScore = 0

# adjust the file name if it's different
resultFile = open('analysis.txt')

# package name
packageName = resultFile.readline()

permutations = []
line = resultFile.readline()
while line != '' and line[0] == '#':
	tokens = line.split('|')

	# new permutation
	permutation = Permutation()
	permutation.id = tokens[0][1:]
	permutation.flags = tokens[1].replace('\n', '')

	# build stats
	tokens = resultFile.readline().split('|')
	permutation.buildExit = tokens[0]
	permutation.buildWallTime = tokens[1]
	permutation.buildUserSystemTime = tokens[2]
	permutation.buildSize = tokens[3]

	# test stats
	permutation.testExit = resultFile.readline()

	#benchmark runs
	line = resultFile.readline()
	while line != '' and line[0] == '$':
		tokens = line.split('|')

		benchmark = Benchmark()
		benchmark.id = tokens[0][1:]
		benchmark.speedScore = tokens[1]
		benchmark.memoryScore = tokens[2]

		permutation.benchmarks.append(benchmark)
		line = resultFile.readline()

	permutations.append(permutation)

# store results
dbName = 'results.db'
dbExists = os.path.exists(dbName)
connection = sqlite3.connect(dbName)

if not dbExists:
	connection.execute(
		'create table permutations (uniqueId integer primary key autoincrement, givenId integer, flags ' + 
		'text, buildExit integer, buildWallTime integer, buildUserSystemTime integer, buildSize integer, testExit integer)')
	connection.execute(
		'create table benchmarks (uniqueId integer primary key autoincrement,' + 
		' givenId integer, speedScore integer, memoryScore integer)')

for per in permutations:
	connection.execute(
		'insert into permutations '+
		'(givenId, flags, buildExit, buildWallTime, buildUserSystemTime, buildSize, testExit) values (?, ?, ?, ?, ?, ?, ?)',
		(per.id, per.flags, per.buildExit, per.buildWallTime, per.buildUserSystemTime, per.buildSize, per.testExit))

	cursor = connection.cursor()
	connection.execute('select last_insert_rowid()')
	lastId = cursor.fetchone()

	#for bench in per.benchmarks:
	#	connection.execute('insert into benchmarks values (?,?,?)')
connection.commit()
connection.close()
